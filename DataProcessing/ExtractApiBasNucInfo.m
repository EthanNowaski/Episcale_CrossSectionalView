% The input for cell information has to be extracted manually from files
% with a "detailedStat_" prefix. Every triplet (row-wise, i.e. row1 ~
% row3) represents the apical node, basal node, and nucleus center 
% position, respectively.

cell = [    29.6534,7.38833,0 %apical node
    37.1877,7.51059,0%basal node
    35.0071,8.30261,0%nucleus center position
    23.7959,7.4237,0
    39.4761,12.666,0
    36.8889,13.6255,0
    18.7544,11.1698,0
    40.2648,16.3701,0
    26.3893,11.6133,0
    16.7741,15.859,0
    40.5932,18.3786,0
    20.0105,15.609,0
    15.7889,20.1946,0
    40.8175,20.0398,0
    24.4236,19.7565,0
    15.3016,24.7643,0
    41.191,21.6588,0
    18.2402,24.0823,0
    15.8202,29.4154,0
    41.5514,23.3389,0
    18.5824,28.6761,0
    16.8866,33.4048,0
    42.0583,24.7899,0
    25.4025,30.2845,0
    18.427,37.3145,0
    42.7328,26.226,0
    20.9059,35.9122,0
    20.6723,41.0534,0
    43.6575,27.6909,0
    23.4953,39.5006,0
    22.7646,44.3263,0
    44.6253,29.0883,0
    30.6872,38.9842,0
    24.9025,47.8993,0
    45.6389,30.3872,0
    26.9807,46.0326,0
    28.1062,51.24,0
    46.8522,31.4964,0
    30.135,49.143,0
    31.4267,53.5935,0
    48.2341,32.6122,0
    36.7663,46.6992,0
    34.581,56.0022,0
    49.6139,33.6865,0
    36.2859,53.5527,0
    37.8201,58.3191,0
    51.0253,34.5212,0
    42.3737,50.5801,0
    41.3971,60.3651,0
    52.5049,35.1782,0
    42.5602,57.8382,0
    45.3778,61.9616,0
    54.1159,35.7458,0
    47.6877,55.4496,0
    49.6747,63.2022,0
    55.6828,36.1288,0
    50.174,60.6694,0
    54.097,63.5953,0
    57.5199,36.3281,0
    54.5896,57.3967,0
    58.4738,63.7811,0
    59.3942,36.4551,0
    58.6468,60.9538,0
    62.8683,63.9195,0
    61.3074,36.4367,0
    60.2948,47.5817,0
    66.1979,63.9223,0
    63.3254,36.2398,0
    63.5684,52.6272,0
    68.7337,64.0427,0
    65.7251,35.8591,0
    67.818,56.4977,0
    71.4838,63.6558,0
    68.3792,35.4773,0
    69.3422,49.8305,0
    74.113,63.2699,0
    71.1614,35.0951,0
    71.8223,44.8673,0
    76.7643,62.9177,0
    73.8359,34.7689,0
    75.908,55.2653,0
    79.4441,62.7773,0
    76.5496,34.445,0
    78.1149,49.6557,0
    82.1112,62.6737,0
    79.2709,34.1236,0
    80.2881,44.0818,0
    84.9338,62.6595,0
    82.019,33.8255,0
    84.2845,55.4646,0
    87.7881,62.2522,0
    84.7715,33.5191,0
    85.8488,43.6471,0
    90.505,61.8566,0
    87.5275,33.2352,0
    89.0837,48.958,0
    93.2234,61.4551,0
    90.2672,32.9432,0
    92.4765,54.1314,0
    95.9763,61.2386,0
    93.0327,32.6627,0
    94.0985,43.0878,0
    98.6993,61.0875,0
    95.7728,32.4101,0
    97.4702,48.6244,0
    101.579,60.9465,0
    98.5176,32.1527,0
    100.825,54.1575,0
    104.379,60.3577,0
    101.257,31.8975,0
    102.253,42.3558,0
    107.037,59.8916,0
    103.982,31.6689,0
    105.748,48.5749,0
    109.628,59.4417,0
    106.666,31.4266,0
    108.102,42.1317,0
    112.24,59.2582,0
    109.462,31.1918,0
    111.61,50.4734,0
    114.921,59.1153,0
    112.22,30.9862,0
    113.918,41.4877,0
    117.562,58.9327,0
    114.906,30.8381,0
    117.352,48.0456,0
    120.003,58.4104,0
    117.286,30.687,0
    120.196,42.4496,0
    123.509,57.9456,0
    119.288,30.4275,0
    122.642,55.2355,0
    128.13,56.9315,0
    121.165,30.0497,0
    127.378,54.3134,0
    132.379,55.2257,0
    122.937,29.6082,0
    131.405,52.306,0
    136.177,53.6611,0
    124.442,28.959,0
    132.604,45.7312,0
    139.966,51.9909,0
    126.131,28.1319,0
    138.426,49.5904,0
    143.769,49.4392,0
    127.518,27.2913,0
    142.152,47.3852,0
    146.771,46.3359,0
    128.893,26.2674,0
    143.243,42.5712,0
    149.391,43.6978,0
    130.055,25.197,0
    141.425,36.0325,0
    152.293,41.0598,0
    131.117,23.904,0
    149.842,39.0974,0
    155.168,37.5145,0
    132.235,22.5278,0
    152.981,35.9684,0
    157.148,33.5908,0
    133.115,21.1544,0
    149.83,30.1555,0
    158.518,29.6962,0
    133.814,19.7522,0
    155.746,28.6248,0
    159.757,25.8288,0
    134.414,18.1972,0
    151.403,23.2715,0
    161.011,21.8854,0
    134.877,16.6075,0
    158.177,21.2313,0
    161.672,17.765,0
    135.201,15.0051,0
    153.803,16.6013,0
    161.874,13.3826,0
    135.362,13.365,0
    159.19,13.3428,0
    161.108,8.69045,0
    135.398,11.6644,0
    157.887,8.82365,0
    159.631,4.56117,0
    135.32,9.97814,0
    150.378,6.28152,0
    157.707,0.726186,0
    135.18,8.2095,0
    153.806,1.23412,0
    155.024,-3.23217,0
    135.069,6.33045,0
    147.128,-1.4364,0
    149.312,-5.99066,0
    135.005,2.44418,0
    137.754,2.56595,0
    143.437,-5.07184,0
    136.04,-3.2359,0
    138.352,-3.10859,0
    142.927,-5.68786,0
    139.435,-8.5851,0
    141.057,-7.37071,0
    146.107,-6.91063,0
    144.638,-11.4043,0
    145.464,-9.36106,0
    149.797,-6.96611,0
    150.441,-11.5908,0
    150.178,-9.40308,0
    153.428,-5.50245,0
    155.6,-9.70154,0
    154.571,-7.65739,0
    156.772,-3.12094,0
    159.843,-6.35244,0
    158.416,-4.74134,0
    159.103,2.04855,0
    164.318,5.08394,0
    161.19,0.504974,0
    160.812,23.735,0
    163.062,26.6189,0
    161.512,28.5029,0
    149.13,44.9271,0
    151.445,46.5859,0
    149.922,46.6789,0
    127.844,57.2065,0
    132.398,58.9487,0
    134.911,56.8822,0
    109.548,60.4535,0
    112.214,63.9011,0
    110.395,62.4071,0
    93.2971,62.3933,0
    93.6902,66.1961,0
    94.2606,64.3465,0
    76.9211,63.8742,0
    75.0854,67.7807,0
    76.6288,65.97,0
    58.4171,64.3903,0
    54.3663,67.0386,0
    56.7932,66.2292,0
    35.0604,56.9416,0
    32.9437,58.9375,0
    31.1775,56.5456,0
    18.9902,38.8316,0
    17.3434,41.9846,0
    19.7332,44.2851,0
    15.6987,17.4086,0
    11.4134,21.2867,0
    13.3386,16.7141,0
    17.0488,11.7527,0
    13.6093,8.8438,0
    15.2379,10.4025,0
    19.9138,8.65499,0
    17.0742,4.88471,0
    18.3907,6.75933,0
    23.1741,6.53086,0
    21.8154,2.05229,0
    22.3807,4.18717,0
    26.7189,5.96166,0
    27.6506,1.27392,0
    27.0055,3.38141,0
    30.0017,6.6877,0
    32.9831,3.17351,0
    31.5923,4.71198,0
];

%Since the data per cell is given in terms of apical, basal, nucleus info we need to extract and categorize the data:
Apical = cell([1:3:size(cell,1)],:);  %every 3rd row starting with 1st row gives the apical nodes
Basal = cell([2:3:size(cell,1)],:);   %every 3rd row starting with 2nd row gives the basal nodes
Nuc = cell([3:3:size(cell,1)],:);     %every 3rd row starting with 3rd row gives the nucles nodes

%Blank matrices to populate using the cell order
apical = zeros(length(Apical),3);
basal = zeros(length(Basal),3);
nuc = zeros(length(Nuc),3);

%For simulations without proliferation:
if (size(apical,1) == 86)
    apical = Apical;
    basal = Basal;
    nuc = Nuc;

    order = [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85];
    order = order + 1;
end

% For simulations involving growth, the order of cells must be entered to 
% acquire the correct calculations. The cell order can be found in
% the printout created (see EpiScale_run.sh).
if size(Apical,1) > 86
    order = [0 1 2 3 4 5 111 135 6 143 7 8 101 9 10 11 12 128 13 120 93 140 129 88 148 113 132 14 15 116 136 96 16 122 105 17 18 19 20 121 21 124 22 139 23 110 103 24 133 25 145 97 118 131 26 138 27 28 144 114 137 29 149 30 142 123 106 95 125 31 90 109 32 33 94 34 35 127 36 117 37 107 38 39 40 86 126 41 42 43 147 44 100 45 46 87 47 102 48 115 92 49 89 50 98 51 52 134 53 54 55 56 99 112 146 57 108 91 130 58 104 119 141 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85]';
    order = order + 1;
    [midpt,~] = find(order == 32);
    [endpt,~] = find(order == 63);

    %We now use the order to reorganize the apical, basal and nuc vectors according to the cell order
    cellOrder_matrix = zeros(length(order),5); %This matrix is just to double check 

    for i = 1:size(Basal,1)
        apical(i,:) = Apical(order(i),:);
        basal(i,:) = Basal(order(i),:);
        nuc(i,:) = Nuc(order(i),:);

        cellOrder_matrix(i,1) = i;
        cellOrder_matrix(i,2) = order(i);
        cellOrder_matrix(i,3:5) = basal(i,:);
    end

end
